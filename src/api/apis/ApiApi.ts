/* tslint:disable */
/* eslint-disable */
/**
 * Mymount
 * Mymount
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Comment,
  Gallery,
  Order,
  PaginatedCommentList,
  PaginatedGalleryList,
  PaginatedOrderList,
  PaginatedProductList,
  PaginatedShopList,
  PaginatedStatusList,
  PatchedComment,
  PatchedGallery,
  PatchedOrder,
  PatchedProduct,
  PatchedShop,
  PatchedStatus,
  Product,
  Shop,
  Status,
} from '../models/index';
import {
    CommentFromJSON,
    CommentToJSON,
    GalleryFromJSON,
    GalleryToJSON,
    OrderFromJSON,
    OrderToJSON,
    PaginatedCommentListFromJSON,
    PaginatedCommentListToJSON,
    PaginatedGalleryListFromJSON,
    PaginatedGalleryListToJSON,
    PaginatedOrderListFromJSON,
    PaginatedOrderListToJSON,
    PaginatedProductListFromJSON,
    PaginatedProductListToJSON,
    PaginatedShopListFromJSON,
    PaginatedShopListToJSON,
    PaginatedStatusListFromJSON,
    PaginatedStatusListToJSON,
    PatchedCommentFromJSON,
    PatchedCommentToJSON,
    PatchedGalleryFromJSON,
    PatchedGalleryToJSON,
    PatchedOrderFromJSON,
    PatchedOrderToJSON,
    PatchedProductFromJSON,
    PatchedProductToJSON,
    PatchedShopFromJSON,
    PatchedShopToJSON,
    PatchedStatusFromJSON,
    PatchedStatusToJSON,
    ProductFromJSON,
    ProductToJSON,
    ShopFromJSON,
    ShopToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models/index';

export interface ApiCommentCreateRequest {
    comment: Comment;
}

export interface ApiCommentDestroyRequest {
    id: number;
}

export interface ApiCommentListRequest {
    page: string;
    limit?: number;
    offset?: number;
}

export interface ApiCommentPartialUpdateRequest {
    id: number;
    patchedComment?: PatchedComment;
}

export interface ApiCommentRetrieveRequest {
    id: number;
}

export interface ApiCommentUpdateRequest {
    id: number;
    comment: Comment;
}

export interface ApiGalleryCreateRequest {
    gallery?: Gallery;
}

export interface ApiGalleryDestroyRequest {
    id: number;
}

export interface ApiGalleryListRequest {
    limit?: number;
    offset?: number;
}

export interface ApiGalleryPartialUpdateRequest {
    id: number;
    patchedGallery?: PatchedGallery;
}

export interface ApiGalleryRetrieveRequest {
    id: number;
}

export interface ApiGalleryUpdateRequest {
    id: number;
    like?: string;
    gallery?: Gallery;
}

export interface ApiOrderCreateRequest {
    order?: Order;
}

export interface ApiOrderDestroyRequest {
    id: number;
}

export interface ApiOrderListRequest {
    limit?: number;
    offset?: number;
}

export interface ApiOrderPartialUpdateRequest {
    id: number;
    patchedOrder?: PatchedOrder;
}

export interface ApiOrderRetrieveRequest {
    id: number;
}

export interface ApiOrderUpdateRequest {
    id: number;
    productType?: string;
    user?: number;
    order?: Order;
}

export interface ApiProductCreateRequest {
    product?: Product;
}

export interface ApiProductDestroyRequest {
    id: number;
}

export interface ApiProductListRequest {
    limit?: number;
    offset?: number;
    productType?: string;
}

export interface ApiProductPartialUpdateRequest {
    id: number;
    patchedProduct?: PatchedProduct;
}

export interface ApiProductRetrieveRequest {
    id: number;
}

export interface ApiProductUpdateRequest {
    id: number;
    product?: Product;
}

export interface ApiShopCreateRequest {
    shop?: Shop;
}

export interface ApiShopDestroyRequest {
    id: number;
}

export interface ApiShopListRequest {
    limit?: number;
    offset?: number;
}

export interface ApiShopPartialUpdateRequest {
    id: number;
    patchedShop?: PatchedShop;
}

export interface ApiShopRetrieveRequest {
    id: number;
}

export interface ApiShopUpdateRequest {
    id: number;
    shop?: Shop;
}

export interface ApiStatusCreateRequest {
    status: Status;
}

export interface ApiStatusDestroyRequest {
    id: number;
}

export interface ApiStatusListRequest {
    limit?: number;
    offset?: number;
}

export interface ApiStatusPartialUpdateRequest {
    id: number;
    patchedStatus?: PatchedStatus;
}

export interface ApiStatusRetrieveRequest {
    id: number;
}

export interface ApiStatusUpdateRequest {
    id: number;
    status: Status;
}

/**
 * 
 */
export class ApiApi extends runtime.BaseAPI {

    /**
     */
    async apiCommentCreateRaw(requestParameters: ApiCommentCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Comment>> {
        if (requestParameters['comment'] == null) {
            throw new runtime.RequiredError(
                'comment',
                'Required parameter "comment" was null or undefined when calling apiCommentCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/comment/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentToJSON(requestParameters['comment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentFromJSON(jsonValue));
    }

    /**
     */
    async apiCommentCreate(requestParameters: ApiCommentCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Comment> {
        const response = await this.apiCommentCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCommentDestroyRaw(requestParameters: ApiCommentDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiCommentDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/comment/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiCommentDestroy(requestParameters: ApiCommentDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiCommentDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiCommentListRaw(requestParameters: ApiCommentListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedCommentList>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling apiCommentList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/comment/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedCommentListFromJSON(jsonValue));
    }

    /**
     */
    async apiCommentList(requestParameters: ApiCommentListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedCommentList> {
        const response = await this.apiCommentListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCommentPartialUpdateRaw(requestParameters: ApiCommentPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Comment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiCommentPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/comment/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedCommentToJSON(requestParameters['patchedComment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentFromJSON(jsonValue));
    }

    /**
     */
    async apiCommentPartialUpdate(requestParameters: ApiCommentPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Comment> {
        const response = await this.apiCommentPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCommentRetrieveRaw(requestParameters: ApiCommentRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Comment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiCommentRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/comment/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentFromJSON(jsonValue));
    }

    /**
     */
    async apiCommentRetrieve(requestParameters: ApiCommentRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Comment> {
        const response = await this.apiCommentRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCommentUpdateRaw(requestParameters: ApiCommentUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Comment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiCommentUpdate().'
            );
        }

        if (requestParameters['comment'] == null) {
            throw new runtime.RequiredError(
                'comment',
                'Required parameter "comment" was null or undefined when calling apiCommentUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/comment/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CommentToJSON(requestParameters['comment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentFromJSON(jsonValue));
    }

    /**
     */
    async apiCommentUpdate(requestParameters: ApiCommentUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Comment> {
        const response = await this.apiCommentUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiGalleryCreateRaw(requestParameters: ApiGalleryCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Gallery>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/gallery/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GalleryToJSON(requestParameters['gallery']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GalleryFromJSON(jsonValue));
    }

    /**
     */
    async apiGalleryCreate(requestParameters: ApiGalleryCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Gallery> {
        const response = await this.apiGalleryCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiGalleryDestroyRaw(requestParameters: ApiGalleryDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiGalleryDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/gallery/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiGalleryDestroy(requestParameters: ApiGalleryDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiGalleryDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiGalleryListRaw(requestParameters: ApiGalleryListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedGalleryList>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/gallery/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedGalleryListFromJSON(jsonValue));
    }

    /**
     */
    async apiGalleryList(requestParameters: ApiGalleryListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedGalleryList> {
        const response = await this.apiGalleryListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiGalleryPartialUpdateRaw(requestParameters: ApiGalleryPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Gallery>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiGalleryPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/gallery/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedGalleryToJSON(requestParameters['patchedGallery']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GalleryFromJSON(jsonValue));
    }

    /**
     */
    async apiGalleryPartialUpdate(requestParameters: ApiGalleryPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Gallery> {
        const response = await this.apiGalleryPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiGalleryRetrieveRaw(requestParameters: ApiGalleryRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Gallery>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiGalleryRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/gallery/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GalleryFromJSON(jsonValue));
    }

    /**
     */
    async apiGalleryRetrieve(requestParameters: ApiGalleryRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Gallery> {
        const response = await this.apiGalleryRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiGalleryUpdateRaw(requestParameters: ApiGalleryUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Gallery>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiGalleryUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['like'] != null) {
            queryParameters['like'] = requestParameters['like'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/gallery/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GalleryToJSON(requestParameters['gallery']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GalleryFromJSON(jsonValue));
    }

    /**
     */
    async apiGalleryUpdate(requestParameters: ApiGalleryUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Gallery> {
        const response = await this.apiGalleryUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOrderCreateRaw(requestParameters: ApiOrderCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/order/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderToJSON(requestParameters['order']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     */
    async apiOrderCreate(requestParameters: ApiOrderCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.apiOrderCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOrderDestroyRaw(requestParameters: ApiOrderDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiOrderDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/order/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiOrderDestroy(requestParameters: ApiOrderDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiOrderDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiOrderListRaw(requestParameters: ApiOrderListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOrderList>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/order/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOrderListFromJSON(jsonValue));
    }

    /**
     */
    async apiOrderList(requestParameters: ApiOrderListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOrderList> {
        const response = await this.apiOrderListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOrderPartialUpdateRaw(requestParameters: ApiOrderPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiOrderPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/order/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedOrderToJSON(requestParameters['patchedOrder']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     */
    async apiOrderPartialUpdate(requestParameters: ApiOrderPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.apiOrderPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOrderRetrieveRaw(requestParameters: ApiOrderRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiOrderRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/order/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     */
    async apiOrderRetrieve(requestParameters: ApiOrderRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.apiOrderRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOrderUpdateRaw(requestParameters: ApiOrderUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiOrderUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['productType'] != null) {
            queryParameters['productType'] = requestParameters['productType'];
        }

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/order/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrderToJSON(requestParameters['order']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     */
    async apiOrderUpdate(requestParameters: ApiOrderUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.apiOrderUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductCreateRaw(requestParameters: ApiProductCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/product/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductToJSON(requestParameters['product']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     */
    async apiProductCreate(requestParameters: ApiProductCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product> {
        const response = await this.apiProductCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductDestroyRaw(requestParameters: ApiProductDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/product/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiProductDestroy(requestParameters: ApiProductDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiProductDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiProductListRaw(requestParameters: ApiProductListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProductList>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['productType'] != null) {
            queryParameters['productType'] = requestParameters['productType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/product/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProductListFromJSON(jsonValue));
    }

    /**
     */
    async apiProductList(requestParameters: ApiProductListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProductList> {
        const response = await this.apiProductListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductPartialUpdateRaw(requestParameters: ApiProductPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/product/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedProductToJSON(requestParameters['patchedProduct']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     */
    async apiProductPartialUpdate(requestParameters: ApiProductPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product> {
        const response = await this.apiProductPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductRetrieveRaw(requestParameters: ApiProductRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/product/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     */
    async apiProductRetrieve(requestParameters: ApiProductRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product> {
        const response = await this.apiProductRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductUpdateRaw(requestParameters: ApiProductUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/product/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductToJSON(requestParameters['product']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     */
    async apiProductUpdate(requestParameters: ApiProductUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product> {
        const response = await this.apiProductUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiShopCreateRaw(requestParameters: ApiShopCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Shop>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/shop/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShopToJSON(requestParameters['shop']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShopFromJSON(jsonValue));
    }

    /**
     */
    async apiShopCreate(requestParameters: ApiShopCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Shop> {
        const response = await this.apiShopCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiShopDestroyRaw(requestParameters: ApiShopDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiShopDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/shop/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiShopDestroy(requestParameters: ApiShopDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiShopDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiShopListRaw(requestParameters: ApiShopListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedShopList>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/shop/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedShopListFromJSON(jsonValue));
    }

    /**
     */
    async apiShopList(requestParameters: ApiShopListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedShopList> {
        const response = await this.apiShopListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiShopPartialUpdateRaw(requestParameters: ApiShopPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Shop>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiShopPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/shop/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedShopToJSON(requestParameters['patchedShop']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShopFromJSON(jsonValue));
    }

    /**
     */
    async apiShopPartialUpdate(requestParameters: ApiShopPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Shop> {
        const response = await this.apiShopPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiShopRetrieveRaw(requestParameters: ApiShopRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Shop>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiShopRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/shop/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShopFromJSON(jsonValue));
    }

    /**
     */
    async apiShopRetrieve(requestParameters: ApiShopRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Shop> {
        const response = await this.apiShopRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiShopUpdateRaw(requestParameters: ApiShopUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Shop>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiShopUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/shop/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ShopToJSON(requestParameters['shop']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShopFromJSON(jsonValue));
    }

    /**
     */
    async apiShopUpdate(requestParameters: ApiShopUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Shop> {
        const response = await this.apiShopUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStatusCreateRaw(requestParameters: ApiStatusCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling apiStatusCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/status/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StatusToJSON(requestParameters['status']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     */
    async apiStatusCreate(requestParameters: ApiStatusCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.apiStatusCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStatusDestroyRaw(requestParameters: ApiStatusDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiStatusDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/status/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiStatusDestroy(requestParameters: ApiStatusDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiStatusDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiStatusListRaw(requestParameters: ApiStatusListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedStatusList>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/status/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedStatusListFromJSON(jsonValue));
    }

    /**
     */
    async apiStatusList(requestParameters: ApiStatusListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedStatusList> {
        const response = await this.apiStatusListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStatusPartialUpdateRaw(requestParameters: ApiStatusPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiStatusPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/status/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedStatusToJSON(requestParameters['patchedStatus']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     */
    async apiStatusPartialUpdate(requestParameters: ApiStatusPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.apiStatusPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStatusRetrieveRaw(requestParameters: ApiStatusRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiStatusRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/status/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     */
    async apiStatusRetrieve(requestParameters: ApiStatusRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.apiStatusRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStatusUpdateRaw(requestParameters: ApiStatusUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiStatusUpdate().'
            );
        }

        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling apiStatusUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/status/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StatusToJSON(requestParameters['status']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     */
    async apiStatusUpdate(requestParameters: ApiStatusUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.apiStatusUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
